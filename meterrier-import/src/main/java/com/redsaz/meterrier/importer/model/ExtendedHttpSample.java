/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.redsaz.meterrier.importer.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExtendedHttpSample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1640200021612872787L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExtendedHttpSample\",\"namespace\":\"com.redsaz.meterrier.importer.model\",\"fields\":[{\"name\":\"httpSample\",\"type\":{\"type\":\"record\",\"name\":\"HttpSample\",\"fields\":[{\"name\":\"millisOffset\",\"type\":\"long\",\"default\":0},{\"name\":\"millisElapsed\",\"type\":\"long\",\"default\":-1},{\"name\":\"labelRef\",\"type\":\"int\",\"default\":0},{\"name\":\"threadNameRef\",\"type\":\"int\",\"default\":0},{\"name\":\"responseCodeRef\",\"type\":\"int\",\"default\":0},{\"name\":\"success\",\"type\":\"boolean\",\"default\":true},{\"name\":\"bytesReceived\",\"type\":\"long\",\"default\":-1},{\"name\":\"currentThreads\",\"type\":\"int\",\"default\":0}]}},{\"name\":\"bytesSent\",\"type\":\"long\",\"default\":-1},{\"name\":\"urlRef\",\"type\":\"int\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.redsaz.meterrier.importer.model.HttpSample httpSample;
  @Deprecated public long bytesSent;
  @Deprecated public int urlRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ExtendedHttpSample() {}

  /**
   * All-args constructor.
   * @param httpSample The new value for httpSample
   * @param bytesSent The new value for bytesSent
   * @param urlRef The new value for urlRef
   */
  public ExtendedHttpSample(com.redsaz.meterrier.importer.model.HttpSample httpSample, java.lang.Long bytesSent, java.lang.Integer urlRef) {
    this.httpSample = httpSample;
    this.bytesSent = bytesSent;
    this.urlRef = urlRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return httpSample;
    case 1: return bytesSent;
    case 2: return urlRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: httpSample = (com.redsaz.meterrier.importer.model.HttpSample)value$; break;
    case 1: bytesSent = (java.lang.Long)value$; break;
    case 2: urlRef = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'httpSample' field.
   * @return The value of the 'httpSample' field.
   */
  public com.redsaz.meterrier.importer.model.HttpSample getHttpSample() {
    return httpSample;
  }

  /**
   * Sets the value of the 'httpSample' field.
   * @param value the value to set.
   */
  public void setHttpSample(com.redsaz.meterrier.importer.model.HttpSample value) {
    this.httpSample = value;
  }

  /**
   * Gets the value of the 'bytesSent' field.
   * @return The value of the 'bytesSent' field.
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }

  /**
   * Sets the value of the 'bytesSent' field.
   * @param value the value to set.
   */
  public void setBytesSent(java.lang.Long value) {
    this.bytesSent = value;
  }

  /**
   * Gets the value of the 'urlRef' field.
   * @return The value of the 'urlRef' field.
   */
  public java.lang.Integer getUrlRef() {
    return urlRef;
  }

  /**
   * Sets the value of the 'urlRef' field.
   * @param value the value to set.
   */
  public void setUrlRef(java.lang.Integer value) {
    this.urlRef = value;
  }

  /**
   * Creates a new ExtendedHttpSample RecordBuilder.
   * @return A new ExtendedHttpSample RecordBuilder
   */
  public static com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder newBuilder() {
    return new com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder();
  }

  /**
   * Creates a new ExtendedHttpSample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ExtendedHttpSample RecordBuilder
   */
  public static com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder newBuilder(com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder other) {
    return new com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder(other);
  }

  /**
   * Creates a new ExtendedHttpSample RecordBuilder by copying an existing ExtendedHttpSample instance.
   * @param other The existing instance to copy.
   * @return A new ExtendedHttpSample RecordBuilder
   */
  public static com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder newBuilder(com.redsaz.meterrier.importer.model.ExtendedHttpSample other) {
    return new com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder(other);
  }

  /**
   * RecordBuilder for ExtendedHttpSample instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExtendedHttpSample>
    implements org.apache.avro.data.RecordBuilder<ExtendedHttpSample> {

    private com.redsaz.meterrier.importer.model.HttpSample httpSample;
    private com.redsaz.meterrier.importer.model.HttpSample.Builder httpSampleBuilder;
    private long bytesSent;
    private int urlRef;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.httpSample)) {
        this.httpSample = data().deepCopy(fields()[0].schema(), other.httpSample);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHttpSampleBuilder()) {
        this.httpSampleBuilder = com.redsaz.meterrier.importer.model.HttpSample.newBuilder(other.getHttpSampleBuilder());
      }
      if (isValidValue(fields()[1], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[1].schema(), other.bytesSent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.urlRef)) {
        this.urlRef = data().deepCopy(fields()[2].schema(), other.urlRef);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ExtendedHttpSample instance
     * @param other The existing instance to copy.
     */
    private Builder(com.redsaz.meterrier.importer.model.ExtendedHttpSample other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.httpSample)) {
        this.httpSample = data().deepCopy(fields()[0].schema(), other.httpSample);
        fieldSetFlags()[0] = true;
      }
      this.httpSampleBuilder = null;
      if (isValidValue(fields()[1], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[1].schema(), other.bytesSent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.urlRef)) {
        this.urlRef = data().deepCopy(fields()[2].schema(), other.urlRef);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'httpSample' field.
      * @return The value.
      */
    public com.redsaz.meterrier.importer.model.HttpSample getHttpSample() {
      return httpSample;
    }

    /**
      * Sets the value of the 'httpSample' field.
      * @param value The value of 'httpSample'.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder setHttpSample(com.redsaz.meterrier.importer.model.HttpSample value) {
      validate(fields()[0], value);
      this.httpSampleBuilder = null;
      this.httpSample = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'httpSample' field has been set.
      * @return True if the 'httpSample' field has been set, false otherwise.
      */
    public boolean hasHttpSample() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'httpSample' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.redsaz.meterrier.importer.model.HttpSample.Builder getHttpSampleBuilder() {
      if (httpSampleBuilder == null) {
        if (hasHttpSample()) {
          setHttpSampleBuilder(com.redsaz.meterrier.importer.model.HttpSample.newBuilder(httpSample));
        } else {
          setHttpSampleBuilder(com.redsaz.meterrier.importer.model.HttpSample.newBuilder());
        }
      }
      return httpSampleBuilder;
    }

    /**
     * Sets the Builder instance for the 'httpSample' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder setHttpSampleBuilder(com.redsaz.meterrier.importer.model.HttpSample.Builder value) {
      clearHttpSample();
      httpSampleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'httpSample' field has an active Builder instance
     * @return True if the 'httpSample' field has an active Builder instance
     */
    public boolean hasHttpSampleBuilder() {
      return httpSampleBuilder != null;
    }

    /**
      * Clears the value of the 'httpSample' field.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder clearHttpSample() {
      httpSample = null;
      httpSampleBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder setBytesSent(long value) {
      validate(fields()[1], value);
      this.bytesSent = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder clearBytesSent() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'urlRef' field.
      * @return The value.
      */
    public java.lang.Integer getUrlRef() {
      return urlRef;
    }

    /**
      * Sets the value of the 'urlRef' field.
      * @param value The value of 'urlRef'.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder setUrlRef(int value) {
      validate(fields()[2], value);
      this.urlRef = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'urlRef' field has been set.
      * @return True if the 'urlRef' field has been set, false otherwise.
      */
    public boolean hasUrlRef() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'urlRef' field.
      * @return This builder.
      */
    public com.redsaz.meterrier.importer.model.ExtendedHttpSample.Builder clearUrlRef() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ExtendedHttpSample build() {
      try {
        ExtendedHttpSample record = new ExtendedHttpSample();
        if (httpSampleBuilder != null) {
          record.httpSample = this.httpSampleBuilder.build();
        } else {
          record.httpSample = fieldSetFlags()[0] ? this.httpSample : (com.redsaz.meterrier.importer.model.HttpSample) defaultValue(fields()[0]);
        }
        record.bytesSent = fieldSetFlags()[1] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[1]);
        record.urlRef = fieldSetFlags()[2] ? this.urlRef : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
